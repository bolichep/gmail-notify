Description: add_sound_fix_connect
 Fixed a connection problem to gmail server.
 Added sound when new unread messages appear.
 Changed the customized pop up message method to a standard libnotify type.
 .
 gmail-notify (1.6.1.1-3) unstable; urgency=low
 .
   * Team upload.
 .
   [ Arthur de Jong ]
   * Drop depends on python-eggtrayicon (Closes: #560983)
   * Bump standards-version to 3.9.4.
 .
   [ Jakub Wilk ]
   * Use canonical URIs for Vcs-* fields.
Author: Arthur de Jong <adejong@debian.org>
Bug-Debian: https://bugs.debian.org/560983

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- a/GmailPopupMenu.py
+++ b/GmailPopupMenu.py
@@ -10,14 +10,18 @@
 		self.item_check = gtk.MenuItem( gmailnotify.lang.get_string(9), gtk.TRUE)
 		self.item_usage = gtk.MenuItem( gmailnotify.lang.get_string(10), gtk.TRUE)
 		self.item_inbox = gtk.MenuItem( gmailnotify.lang.get_string(23), gtk.TRUE)
+		self.item_sound = gtk.CheckMenuItem( gmailnotify.lang.get_string(37), gtk.TRUE)
 		self.item_conf  = gtk.MenuItem( gmailnotify.lang.get_string(11), gtk.TRUE)
 		self.item_exit = gtk.MenuItem( gmailnotify.lang.get_string(12), gtk.TRUE)
 		# Connect the events
 		self.item_check.connect( 'activate', gmailnotify.mail_check)
 		self.item_usage.connect( 'activate', gmailnotify.show_quota_info)
                	self.item_inbox.connect( 'activate', gmailnotify.gotourl)
+		self.item_sound.connect( 'activate', gmailnotify.sound_handle)
 		self.item_conf.connect( 'activate', gmailnotify.update_config)
 		self.item_exit.connect( 'activate', gmailnotify.exit)
+		# Set active item
+		self.item_sound.set_active(gtk.TRUE)
 		# Create the menu
 		self.menu = gtk.Menu()
 		# Append menu items to the menu
@@ -25,6 +29,8 @@
 		#self.menu.append( self.item_usage)
 		self.menu.append( self.item_inbox)
 		self.menu.append( gtk.SeparatorMenuItem())
+		self.menu.append( self.item_sound)
+		self.menu.append( gtk.SeparatorMenuItem())
 		self.menu.append( self.item_conf)
 		self.menu.append( gtk.SeparatorMenuItem())
 		self.menu.append( self.item_exit)
--- a/gmailatom.py
+++ b/gmailatom.py
@@ -112,7 +112,8 @@
 # The mail class
 class GmailAtom:
 
-	realm = "New mail feed"
+#	realm = "New mail feed"
+	realm = "mail.google.com"
 	host = "https://mail.google.com"
 	url = host + "/mail/feed/atom"
 
--- a/langs.xml
+++ b/langs.xml
@@ -35,6 +35,7 @@
 		<string id="34">Save username and password</string>
 		<string id="35">s</string>
 		<string id="36">Proxy</string>
+		<string id="37">_Sound</string>
 	</lang>
 	<lang name="Español">
 		<string id="1" >Configuración de Gmail Notifier</string>
@@ -71,6 +72,7 @@
 		<string id="34">Guardar nombre de usuario y contraseña</string>
 		<string id="35">s</string>
 		<string id="36">Proxy</string>
+		<string id="37">_Sonido</string>
 	</lang>
 	<lang name="Svenska">
 		<string id="1" >Gmail Notifier - konfiguration</string>
--- a/notifier.py
+++ b/notifier.py
@@ -5,6 +5,7 @@
 pygtk.require('2.0')
 import gtk
 import time
+import pynotify
 import os
 import sys
 sys.path.insert (0, "/usr/lib/gmail-notify/")
@@ -20,6 +21,10 @@
 ICON_PATH="/usr/share/apps/gmail-notify/icon.png"
 ICON2_PATH="/usr/share/apps/gmail-notify/icon2.png"
 
+def help_cb(n,action):
+	print "Nothing to help"
+	return
+
 def removetags(text):
 	raw=text.split("<b>")
 	raw2=raw[1].split("</b>")
@@ -47,6 +52,7 @@
 	configWindow = None
         options = None
 
+
 	def __init__(self):
 		self.init=0
 		print "Gmail Notifier v1.6.1b ("+time.strftime("%Y/%m/%d %H:%M:%S", time.localtime())+")"
@@ -85,9 +91,15 @@
 		self.maintimer=None
 		self.popuptimer=0
 		self.waittimer=0
+#		# Enable Sound
+#		self.sound_enabled=True
 		# Create the popup menu
 		self.popup_menu = GmailPopupMenu.GmailPopupMenu( self)
-		# Create the popup
+		# Init pynotify
+		pynotify.init("gmail-notify")
+		# Create the notify
+		#noti = pynotify.Notification("")
+
 		self.fixed=gtk.Fixed()
 		self.window.add(self.fixed)
 		self.fixed.show()
@@ -101,7 +113,9 @@
 		self.label=gtk.Label()
 		self.label.set_line_wrap(1)
 		self.label.set_size_request(170,140)
-		self.default_label = "<span size='large' ><i><u>"+self.lang.get_string(21)+"</u></i></span>\n\n\n"+self.lang.get_string(20)
+		self.default_title =self.lang.get_string(21)
+		self.default_label =self.lang.get_string(20)
+
 		self.label.set_markup( self.default_label)
 		# Show popup
 		self.label.show()
@@ -128,8 +142,8 @@
 		self.tray.set_title(self.lang.get_string(21))
 		self.tray.connect("button_press_event",self.tray_icon_clicked)
 		# Set the image for the tray icon
-		pixbuf = gtk.gdk.pixbuf_new_from_file( ICON_PATH )
-		scaled_buf = pixbuf.scale_simple(24,24,gtk.gdk.INTERP_BILINEAR)
+		self.pixbuf = gtk.gdk.pixbuf_new_from_file( ICON_PATH )
+		scaled_buf = self.pixbuf.scale_simple(24,24,gtk.gdk.INTERP_BILINEAR)
 		self.tray.set_from_pixbuf(scaled_buf)
 
 		self.init=1
@@ -142,6 +156,9 @@
 
 		self.maintimer=gtk.timeout_add(self.options['checkinterval'],self.mail_check)
 
+	def sound_handle(self,menuitem):
+		return
+
 	def connect(self):
 		# If connecting, cancel connection
 		if self.dont_connect==1:
@@ -186,6 +203,9 @@
 		# Get new messages count
 		attrs = self.has_new_messages()
 
+		# attrs[0] -> Unread Messages
+		# attrs[1] -> New messages
+
 		# If mail check was unsuccessful
 		if attrs[0]==-1:
 			self.mailcheck=0
@@ -197,28 +217,38 @@
 			subject= attrs[3]
 			snippet= attrs[4]
 			if len(snippet)>0:
-				self.default_label="<span size='large' ><u><i>"+self.lang.get_string(17)+sender[0:24]+"</i></u></span>\n"+shortenstring(subject,20)+"\n\n"+snippet+"..."
+				#self.default_title="<span size='large' ><u><i>"+self.lang.get_string(17)+sender[0:24]+"</i></u></span>\n"
+				self.default_title=self.lang.get_string(17)+sender[0:24]
+				self.default_label=shortenstring(subject,20)+"\n\n"+snippet+"..."
 			else:
-				self.default_label="<span size='large' ><u><i>"+self.lang.get_string(17)+sender[0:24]+"</i></u></span>\n"+shortenstring(subject,20)+"\n\n"+snippet+"..."
+				self.default_title=self.lang.get_string(17)+sender[0:24]
+				self.default_label=shortenstring(subject,20)+"\n\n"+snippet+"..."
+
 			self.show_popup()
+
 		if attrs[0]>0:
+			if self.popup_menu.item_sound.get_active():
+				os.system("pacmd play-file /usr/share/sounds/sonido-huayra/stereo/suspend-error.oga 0 2>&1 >/dev/null &")
 			print str(attrs[0])+" unread messages"
 			s = ' ' 
 			if attrs[0]>1: s=self.lang.get_string(35)+" "
 			self.tray.set_tooltip_text((self.lang.get_string(19))%{'u':attrs[0],'s':s})
-			pixbuf = gtk.gdk.pixbuf_new_from_file( ICON2_PATH )
+			self.pixbuf = gtk.gdk.pixbuf_new_from_file( ICON2_PATH )
 		else:
 			print "no new messages"
-			self.default_label="<span size='large' ><i><u>"+self.lang.get_string(21)+"</u></i></span>\n\n\n"+self.lang.get_string(18)
+			#self.default_title="<span size='large' ><i><u>"+self.lang.get_string(21)+"</u></i></span>\n\n\n"
+			self.default_title=self.lang.get_string(21)
+			self.default_label=self.lang.get_string(18)
 			self.tray.set_tooltip_text(self.lang.get_string(18))
-			pixbuf = gtk.gdk.pixbuf_new_from_file( ICON_PATH )
+			self.pixbuf = gtk.gdk.pixbuf_new_from_file( ICON_PATH )
+
 		
 		p = re.compile('&')
 		self.label.set_markup(p.sub('&amp;', self.default_label))
-		scaled_buf = pixbuf.scale_simple(24,24,gtk.gdk.INTERP_BILINEAR)
+		scaled_buf = self.pixbuf.scale_simple(24,24,gtk.gdk.INTERP_BILINEAR)
 		self.tray.set_from_pixbuf(scaled_buf)
 		self.unreadmsgcount=attrs[0]
-		
+
 		self.mailcheck=0
 
 		return gtk.TRUE
@@ -255,26 +285,43 @@
 		else:
 			return (unreadmsgcount,0, sender, subject, finalsnippet)
 
+	def gotourlnotify( self , n, action ):
+		assert action == "default"
+		print "----------"
+		print "launching browser "+self.options['browserpath']+" http://mail.google.com"
+		os.system(self.options['browserpath']+" http://mail.google.com &")
+		n.close()
+		return
+
+
+
 	def show_popup(self):
-		# If popup is up, destroy it
-		if self.popup==1:
-			self.destroy_popup()
+		if self.popup==1:return
 		# Generate popup
 		print "generating popup"
-		self.popuptimer = gtk.timeout_add(self.options['animationdelay'],self.popup_proc)
-		self.window.show()	
+		self.noti = pynotify.Notification(self.default_title,re.sub('&','&amp;', self.default_label))
+		self.noti.set_icon_from_pixbuf(self.pixbuf)
+		self.noti.set_category("presence.online")
+		self.noti.add_action("default","Default Action", self.gotourlnotify )
+		#self.noti.add_action("help","Help", help_cb )
+		self.noti.show()
+		self.popup=1
 		return
 
 	def destroy_popup(self):
+		self.popup=0
 		print "destroying popup"
-		if self.popuptimer>0:gtk.timeout_remove(self.popuptimer)
-		if self.waittimer>0: gtk.timeout_remove(self.waittimer)
-		self.senddown=0
-		self.hassettimer=0
-		self.window.hide()
-		self.window.resize(180,1)
-		self.window.move(gtk.gdk.screen_width() - self.width, gtk.gdk.screen_height() - self.height)
 		return
+#	def Xdestroy_popup(self):
+#		print "destroying popup"
+#		if self.popuptimer>0:gtk.timeout_remove(self.popuptimer)
+#		if self.waittimer>0: gtk.timeout_remove(self.waittimer)
+#		self.senddown=0
+#		self.hassettimer=0
+#		self.window.hide()
+#		self.window.resize(180,1)
+#		self.window.move(gtk.gdk.screen_width() - self.width, gtk.gdk.screen_height() - self.height)
+#		return
 
 	def popup_proc(self):
 		# Set popup status flag
@@ -289,18 +336,18 @@
 				# If popup is down
 				self.senddown=0
 				self.window.hide()
-				self.window.resize(180,1)
+				self.window.resize(280,1)
 				self.window.move(gtk.gdk.screen_width() - self.width, gtk.gdk.screen_height() - self.height)
 				self.popup=0
 				return gtk.FALSE
 			else:
 				# Move it down
-				self.window.resize(180,sizey-2)	
+				self.window.resize(280,sizey-2)	
 				self.window.move(gtk.gdk.screen_width() - self.width,positiony+2)
 		else:
 			if sizey<140:
 				# Move it up
-				self.window.resize(180,sizey+2)
+				self.window.resize(280,sizey+2)
 				self.window.move(gtk.gdk.screen_width() - self.width,positiony-2)
 			else:
 				# If popup is up, run wait timer
@@ -311,6 +358,11 @@
 					self.hassettimer=1	
 		return gtk.TRUE
 
+        def gotourl( self, wg=None):
+                print "----------"
+                print "launching browser "+self.options['browserpath']+" http://mail.google.com"
+                os.system(self.options['browserpath']+" http://mail.google.com &")
+
 	def wait(self):
 		self.senddown=1
 		self.hassettimer=0
@@ -321,6 +373,7 @@
 			self.popup_menu.show_menu(event)
 		else:
 			self.label.set_markup(self.default_label)
+			self.popup=0
 			self.show_popup()
 
 	def event_box_clicked(self,signal,event):
@@ -336,10 +389,6 @@
 		    gtk.main_quit(0)
 		dialog.destroy()
 
-	def gotourl( self, wg=None):
-		print "----------"
-		print "launching browser "+self.options['browserpath']+" http://mail.google.com"
-		os.system(self.options['browserpath']+" http://mail.google.com &")
 
 	def show_quota_info( self, event):
 		print "Not available"
